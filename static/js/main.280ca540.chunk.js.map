{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","state","chartData","height","width","data","this","options","maintainAspectRatio","title","display","displayTitle","text","fontSize","fontColor","legend","displayLegend","position","legendPosition","scales","xAxes","gridLines","color","ticks","scaleLabel","labelString","yAxes","React","Component","defaultProps","App","dna","gcContent","info","ext","handleChange","bind","text2DNA","getChartData","chart","setState","labels","datasets","label","backgroundColor","dnaSequence","extLenDict","extSeq","i","length","s","nextExt","substr","repeat","console","log","bits","getBits","extDna","getExtensionLengths","ternary","charCodeAt","toString","modDict","0","1","2","slice","e","target","value","concat","infoIndex","getInfoExt","gc","className","type","onChange","redraw","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.280ca540.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Bar, Line, Pie} from 'react-chartjs-2';\n\n\nclass Chart extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      chartData: props.chartData\n    }\n  }\n\n  static defaultProps = {\n    displayTitle: true,\n    displayLegend: false,\n    legendPosition: 'right',\n    chartData: {},\n    title: \"Data\",\n    yAxes: \"GC Content\"\n  }\n\n  render(){\n    return (\n      <div>\n      <Line\n          height = {35}\n          width = {50}\n          data={this.props.chartData}\n          options={{\n            maintainAspectRatio: true,\n            title: {\n              display: this.props.displayTitle,\n              text: this.props.title,\n              fontSize: 25,\n            fontColor: \"#86878f\"},\n\n              legend: {\n                display: this.props.displayLegend,\n                position: this.props.legendPosition\n              },\n\n              scales: {\n        xAxes: [ {\n         display: true,\n         gridLines: {color: \"#86878f\" },\n         ticks: {\n                  fontColor: \"#86878f\"},\n          scaleLabel: {\n            display: true,\n            labelString: 'DNA Strand length',\n            fontSize: 18,\n            fontColor: '#86878f'\n          }\n        } ],\n        yAxes: [ {\n          display: true,\n          gridLines: {color: \"#86878f\" },\n          ticks: {\n                   fontColor: \"#86878f\"},\n          scaleLabel: {\n            display: true,\n            labelString: this.props.yAxes,\n            fontSize: 18,\n            fontColor: '#86878f'\n\n          }\n        } ]\n      }}}/>\n      </div>\n    )\n  }\n\n\n\n\n\n}\n\nexport default Chart;\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from  './Chart';\n\n\nclass App extends React.Component{\n\n  constructor(){\n    super()\n    this.state =\n    {\n      text: '',\n      dna: '',\n      chartData: {gcContent: {}, info: {}, ext: {}}\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.text2DNA = this.text2DNA.bind(this)\n    this.gcContent = this.gcContent.bind(this)\n    this.getChartData = this.getChartData.bind(this)\n\n\n\n\n  }\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n\n  getChartData(chart){\n        this.setState(\n      {\n          chartData: {\n            gcContent: {\n              labels: [],\n              datasets: [\n                {\n                  label: 'Population',\n                  data: [],\n                  backgroundColor: [\n                    'rgba(255, 99, 132, 0.6)'\n                  ]\n                }\n              ]},\n          info: {\n            labels: [],\n            datasets: [\n              {\n                label: 'Population',\n                data: [],\n                backgroundColor: [\n                  'rgba(255, 99, 132, 0.6)'\n                ]\n              }\n            ]\n\n          },\n\n          ext: {\n            labels: [],\n            datasets: [\n              {\n                label: 'Population',\n                data: [],\n                backgroundColor: [\n                  'rgba(255, 99, 132, 0.6)'\n                ]\n              }\n            ]\n\n          }\n\n        }\n\n\n\n    }\n    )\n  }\n\n  getExtensionLengths(dnaSequence){\n        var extLenDict = {\n        \"G\": {\"A\": 4, \"C\": 2 , \"T\": 2, },\n        \"A\": {\"G\": 5 , \"C\": 3, \"T\": 3 },\n        \"C\": {\"T\": 4, \"G\": 6 , \"A\": 11},\n        \"T\": {\"C\": 2, \"A\": 3 , \"G\": 4}\n        }\n        var extSeq = \"\"\n        var count = 0\n        for (var i=0; i<dnaSequence.length; i++){\n          var s = dnaSequence[i]\n            if (!extSeq){\n                extSeq += s.repeat(extLenDict[\"G\"][s])\n                count += extLenDict[\"G\"][(s)]}\n            else{\n                 var nextExt = extLenDict[extSeq.substr(-1)][s]\n                 extSeq += s.repeat(nextExt)\n                 count += nextExt\n               }}\n        console.log(extSeq)\n\n        return extSeq\n      }\n\ngetInfoExt(text){\n  var bits = this.getBits(text)\n  var dna = this.text2DNA(text)\n  var extDna = this.getExtensionLengths(dna)\n  return bits.length/extDna.length\n}\n\n\n\n  text2DNA(text){\n    //get trinary\n    var ternary = \"\"\n    for (var i = 0; i < text.length; i++){\n      //get binary\n      var num = text[i].charCodeAt(0).toString(3)\n      ternary += num\n    }\n\n    var dnaSequence = \"\"\n    var modDict = {\n      \"G\": {0: \"A\", 1: \"T\", 2: \"C\"},\n      \"A\": {0: \"G\", 1: \"C\", 2: \"T\"},\n      \"C\": {0: \"T\", 1: \"G\", 2: \"A\"},\n      \"T\": {0: \"C\", 1: \"A\", 2: \"G\"}\n      }\n\n      for (var i = 0; i < ternary.length; i++){\n        if (!dnaSequence){\n          dnaSequence += modDict[\"G\"][ternary[i]]\n\n        }\n        else {\n          dnaSequence += modDict[dnaSequence.slice(-1)][ternary[i]]\n        }\n      }\n\n      return dnaSequence\n\n  }\n\n  handleChange(e){\n\n    if (!this.state.text){\n      this.state.chartData.gcContent.labels = [];\n      this.state.chartData.gcContent.datasets[0].data = [];\n      this.state.chartData.info.labels = [];\n      this.state.chartData.info.datasets[0].data = [];\n      this.state.chartData.ext.labels = [];\n      this.state.chartData.ext.datasets[0].data = [];\n    }\n\n    console.log(this.state.text)\n    this.setState({text: e.target.value}, () => this.setState({chartData: {\n      gcContent: {\n      labels: this.state.chartData.gcContent.labels.concat([this.state.dna.length]),\n      datasets: [\n        {\n          label: 'Population',\n          data: this.state.chartData.gcContent.datasets[0].data.concat([this.gcContent(this.state.dna)]),\n          backgroundColor: [\n            'rgba(50, 69, 140, 0.6)'\n          ]\n        }\n      ]\n\n\n},\n      info: {\n      labels: this.state.chartData.info.labels.concat([this.state.dna.length]),\n      datasets: [\n        {\n          label: 'Population',\n          data: this.state.chartData.info.datasets[0].data.concat([this.infoIndex(this.state.text)]),\n          backgroundColor: [\n            'rgba(206, 55, 60, 0.6)'\n          ]\n        }\n      ]\n\n\n},\next: {\nlabels: this.state.chartData.ext.labels.concat([this.state.dna.length]),\ndatasets: [\n  {\n    label: 'Population',\n    data: this.state.chartData.ext.datasets[0].data.concat([this.getInfoExt(this.state.text)]),\n    backgroundColor: [\n      'rgba(125, 147, 13, 0.6)'\n    ]\n  }\n]\n\n\n}\n\n\n}}))\n\nthis.setState({dna: this.text2DNA(e.target.value)})\n}\n\n\n  gcContent(dnaSequence){\n    var gc = 0\n    for (var i=0; i < dnaSequence.length; i++){\n      if (dnaSequence[i] == \"G\" || dnaSequence[i] == \"C\"){\n        gc += 1;\n      }\n    }\n\n  return gc/(dnaSequence.length)\n\n  }\n\n  getBits(text) {\n    var bits = \"\"\n    for (var i = 0; i < text.length; i ++) {\n      var num = text.charCodeAt(i).toString(2)\n      bits += num\n    }\n    return bits\n\n  }\n\n  infoIndex(text) {\n    var dna = this.text2DNA(text);\n    var bits = this.getBits(text);\n    console.log(text)\n    console.log(dna)\n    console.log(bits)\n    console.log(bits.length/dna.length)\n    return (bits.length)/(dna.length)\n    }\n\n\n  totalNucleotides(dnaSequence)\n{\n  return dnaSequence.length\n}\n\n  render(){\n    return (\n      <div\n      className = \"App\">\n      <h1 className = \"title\"> DNA Data Storage </h1>\n      <input\n        className = \"input\"\n        type=\"text\"\n        onChange = {this.handleChange}\n        value = {this.state.text}/>\n        <p className = \"dna\"> {this.state.dna} </p>\n        <h1 className = \"text\"> Strand Analysis </h1>\n        <div className = \"firstChart\">\n        <Chart title=\"GC Content\" chartData = {this.state.chartData.gcContent} redraw={true}/>\n        </div>\n        <div className = \"firstChart\">\n        <Chart title=\"Template Strand Information Index\" yAxes = 'bits/nt' chartData = {this.state.chartData.info} redraw={true}/>\n        </div>\n        <div className = \"firstChart\">\n        <Chart title=\"Extension Length  Information Index\" yAxes = 'bits/nt' chartData = {this.state.chartData.ext} redraw={true}/>\n        </div>\n\n        </div>\n\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}